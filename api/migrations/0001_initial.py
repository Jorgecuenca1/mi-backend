# Generated by Django 4.2.21 on 2025-08-27 15:26

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Veterinario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('tipo_usuario', models.CharField(blank=True, choices=[('administrador', 'Administrador'), ('vacunador', 'Vacunador'), ('tecnico', 'Técnico')], default='vacunador', help_text='Tipo de usuario: administrador, vacunador o técnico', max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='Grupos a los que pertenece este veterinario', related_name='veterinario_groups', related_query_name='veterinario', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Permisos específicos de este veterinario', related_name='veterinario_user_permissions', related_query_name='veterinario', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Planilla',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('municipio', models.CharField(default='Sin especificar', help_text='Nombre del municipio', max_length=100)),
                ('urbano_rural', models.CharField(choices=[('urbano', 'Urbano'), ('rural', 'Rural')], default='urbano', help_text='Tipo de zona: urbano o rural', max_length=10)),
                ('centro_poblado_vereda_barrio', models.CharField(default='Sin especificar', help_text='Centro poblado, vereda o barrio', max_length=100)),
                ('zona', models.CharField(default='Sin especificar', help_text='Zona específica', max_length=100)),
                ('creada', models.DateTimeField(auto_now_add=True)),
                ('assigned_to', models.ForeignKey(help_text='Vacunador que creó la planilla', on_delete=django.db.models.deletion.CASCADE, related_name='planillas', to=settings.AUTH_USER_MODEL)),
                ('tecnico_asignado', models.ForeignKey(blank=True, help_text='Técnico asignado para revisar la planilla', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='planillas_asignadas', to=settings.AUTH_USER_MODEL)),
                ('tecnicos_adicionales', models.ManyToManyField(blank=True, help_text='Técnicos adicionales asignados para revisar esta planilla', limit_choices_to={'tipo_usuario': 'tecnico'}, related_name='planillas_como_tecnico_adicional', to=settings.AUTH_USER_MODEL)),
                ('vacunadores_adicionales', models.ManyToManyField(blank=True, help_text='Vacunadores adicionales asignados a esta planilla', limit_choices_to={'tipo_usuario': 'vacunador'}, related_name='planillas_como_vacunador_adicional', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Municipio',
                'verbose_name_plural': 'Municipios',
            },
        ),
        migrations.CreateModel(
            name='Responsable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('telefono', models.CharField(max_length=20)),
                ('finca', models.CharField(max_length=100)),
                ('zona', models.CharField(default='Sin especificar', help_text='Zona específica de vacunación', max_length=100)),
                ('nombre_zona', models.CharField(default='Sin especificar', help_text='Nombre descriptivo de la zona', max_length=150)),
                ('lote_vacuna', models.CharField(default='Sin especificar', help_text='Lote de la vacuna utilizada', max_length=50)),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Usuario que creó este responsable', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='responsables_creados', to=settings.AUTH_USER_MODEL)),
                ('planilla', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responsables', to='api.planilla')),
            ],
        ),
        migrations.CreateModel(
            name='Mascota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('tipo', models.CharField(choices=[('perro', 'Perro'), ('gato', 'Gato')], default='perro', max_length=10)),
                ('raza', models.CharField(default='M', max_length=10)),
                ('color', models.CharField(default='Sin especificar', max_length=50)),
                ('antecedente_vacunal', models.BooleanField(default=False)),
                ('latitud', models.DecimalField(blank=True, decimal_places=10, help_text='Latitud de la ubicación de la mascota', max_digits=15, null=True)),
                ('longitud', models.DecimalField(blank=True, decimal_places=10, help_text='Longitud de la ubicación de la mascota', max_digits=15, null=True)),
                ('foto', models.ImageField(blank=True, help_text='Foto de la mascota', null=True, upload_to='mascotas/fotos/')),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Usuario que creó esta mascota', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mascotas_creadas', to=settings.AUTH_USER_MODEL)),
                ('responsable', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mascotas', to='api.responsable')),
            ],
        ),
    ]
